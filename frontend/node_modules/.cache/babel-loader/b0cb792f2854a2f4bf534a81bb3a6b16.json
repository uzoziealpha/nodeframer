{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Move = void 0;\n\nconst Utils_1 = require(\"../../../../Utils\");\n\nconst Attract_1 = require(\"./Attract\");\n\nconst MoveAngle_1 = require(\"./MoveAngle\");\n\nconst MoveGravity_1 = require(\"./MoveGravity\");\n\nconst OutModes_1 = require(\"./OutModes\");\n\nconst Path_1 = require(\"./Path/Path\");\n\nconst Spin_1 = require(\"./Spin\");\n\nconst Trail_1 = require(\"./Trail\");\n\nclass Move {\n  constructor() {\n    this.angle = new MoveAngle_1.MoveAngle();\n    this.attract = new Attract_1.Attract();\n    this.decay = 0;\n    this.distance = {};\n    this.direction = \"none\";\n    this.drift = 0;\n    this.enable = false;\n    this.gravity = new MoveGravity_1.MoveGravity();\n    this.path = new Path_1.Path();\n    this.outModes = new OutModes_1.OutModes();\n    this.random = false;\n    this.size = false;\n    this.speed = 2;\n    this.spin = new Spin_1.Spin();\n    this.straight = false;\n    this.trail = new Trail_1.Trail();\n    this.vibrate = false;\n    this.warp = false;\n  }\n\n  get collisions() {\n    return false;\n  }\n\n  set collisions(value) {}\n\n  get bounce() {\n    return this.collisions;\n  }\n\n  set bounce(value) {\n    this.collisions = value;\n  }\n\n  get out_mode() {\n    return this.outMode;\n  }\n\n  set out_mode(value) {\n    this.outMode = value;\n  }\n\n  get outMode() {\n    return this.outModes.default;\n  }\n\n  set outMode(value) {\n    this.outModes.default = value;\n  }\n\n  get noise() {\n    return this.path;\n  }\n\n  set noise(value) {\n    this.path = value;\n  }\n\n  load(data) {\n    var _a, _b, _c;\n\n    if (data === undefined) {\n      return;\n    }\n\n    if (data.angle !== undefined) {\n      if (typeof data.angle === \"number\") {\n        this.angle.value = data.angle;\n      } else {\n        this.angle.load(data.angle);\n      }\n    }\n\n    this.attract.load(data.attract);\n\n    if (data.decay !== undefined) {\n      this.decay = data.decay;\n    }\n\n    if (data.direction !== undefined) {\n      this.direction = data.direction;\n    }\n\n    if (data.distance !== undefined) {\n      this.distance = typeof data.distance === \"number\" ? {\n        horizontal: data.distance,\n        vertical: data.distance\n      } : (0, Utils_1.deepExtend)({}, data.distance);\n    }\n\n    if (data.drift !== undefined) {\n      this.drift = (0, Utils_1.setRangeValue)(data.drift);\n    }\n\n    if (data.enable !== undefined) {\n      this.enable = data.enable;\n    }\n\n    this.gravity.load(data.gravity);\n    const outMode = (_a = data.outMode) !== null && _a !== void 0 ? _a : data.out_mode;\n\n    if (data.outModes !== undefined || outMode !== undefined) {\n      if (typeof data.outModes === \"string\" || data.outModes === undefined && outMode !== undefined) {\n        this.outModes.load({\n          default: (_b = data.outModes) !== null && _b !== void 0 ? _b : outMode\n        });\n      } else {\n        this.outModes.load(data.outModes);\n      }\n    }\n\n    this.path.load((_c = data.path) !== null && _c !== void 0 ? _c : data.noise);\n\n    if (data.random !== undefined) {\n      this.random = data.random;\n    }\n\n    if (data.size !== undefined) {\n      this.size = data.size;\n    }\n\n    if (data.speed !== undefined) {\n      this.speed = (0, Utils_1.setRangeValue)(data.speed);\n    }\n\n    this.spin.load(data.spin);\n\n    if (data.straight !== undefined) {\n      this.straight = data.straight;\n    }\n\n    this.trail.load(data.trail);\n\n    if (data.vibrate !== undefined) {\n      this.vibrate = data.vibrate;\n    }\n\n    if (data.warp !== undefined) {\n      this.warp = data.warp;\n    }\n  }\n\n}\n\nexports.Move = Move;","map":{"version":3,"sources":["/Users/obinnauzozie/Desktop/robo/frontend/node_modules/tsparticles/Options/Classes/Particles/Move/Move.js"],"names":["Object","defineProperty","exports","value","Move","Utils_1","require","Attract_1","MoveAngle_1","MoveGravity_1","OutModes_1","Path_1","Spin_1","Trail_1","constructor","angle","MoveAngle","attract","Attract","decay","distance","direction","drift","enable","gravity","MoveGravity","path","Path","outModes","OutModes","random","size","speed","spin","Spin","straight","trail","Trail","vibrate","warp","collisions","bounce","out_mode","outMode","default","noise","load","data","_a","_b","_c","undefined","horizontal","vertical","deepExtend","setRangeValue"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Move = void 0;\nconst Utils_1 = require(\"../../../../Utils\");\nconst Attract_1 = require(\"./Attract\");\nconst MoveAngle_1 = require(\"./MoveAngle\");\nconst MoveGravity_1 = require(\"./MoveGravity\");\nconst OutModes_1 = require(\"./OutModes\");\nconst Path_1 = require(\"./Path/Path\");\nconst Spin_1 = require(\"./Spin\");\nconst Trail_1 = require(\"./Trail\");\nclass Move {\n    constructor() {\n        this.angle = new MoveAngle_1.MoveAngle();\n        this.attract = new Attract_1.Attract();\n        this.decay = 0;\n        this.distance = {};\n        this.direction = \"none\";\n        this.drift = 0;\n        this.enable = false;\n        this.gravity = new MoveGravity_1.MoveGravity();\n        this.path = new Path_1.Path();\n        this.outModes = new OutModes_1.OutModes();\n        this.random = false;\n        this.size = false;\n        this.speed = 2;\n        this.spin = new Spin_1.Spin();\n        this.straight = false;\n        this.trail = new Trail_1.Trail();\n        this.vibrate = false;\n        this.warp = false;\n    }\n    get collisions() {\n        return false;\n    }\n    set collisions(value) {\n    }\n    get bounce() {\n        return this.collisions;\n    }\n    set bounce(value) {\n        this.collisions = value;\n    }\n    get out_mode() {\n        return this.outMode;\n    }\n    set out_mode(value) {\n        this.outMode = value;\n    }\n    get outMode() {\n        return this.outModes.default;\n    }\n    set outMode(value) {\n        this.outModes.default = value;\n    }\n    get noise() {\n        return this.path;\n    }\n    set noise(value) {\n        this.path = value;\n    }\n    load(data) {\n        var _a, _b, _c;\n        if (data === undefined) {\n            return;\n        }\n        if (data.angle !== undefined) {\n            if (typeof data.angle === \"number\") {\n                this.angle.value = data.angle;\n            }\n            else {\n                this.angle.load(data.angle);\n            }\n        }\n        this.attract.load(data.attract);\n        if (data.decay !== undefined) {\n            this.decay = data.decay;\n        }\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        if (data.distance !== undefined) {\n            this.distance =\n                typeof data.distance === \"number\"\n                    ? {\n                        horizontal: data.distance,\n                        vertical: data.distance,\n                    }\n                    : (0, Utils_1.deepExtend)({}, data.distance);\n        }\n        if (data.drift !== undefined) {\n            this.drift = (0, Utils_1.setRangeValue)(data.drift);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        this.gravity.load(data.gravity);\n        const outMode = (_a = data.outMode) !== null && _a !== void 0 ? _a : data.out_mode;\n        if (data.outModes !== undefined || outMode !== undefined) {\n            if (typeof data.outModes === \"string\" || (data.outModes === undefined && outMode !== undefined)) {\n                this.outModes.load({\n                    default: (_b = data.outModes) !== null && _b !== void 0 ? _b : outMode,\n                });\n            }\n            else {\n                this.outModes.load(data.outModes);\n            }\n        }\n        this.path.load((_c = data.path) !== null && _c !== void 0 ? _c : data.noise);\n        if (data.random !== undefined) {\n            this.random = data.random;\n        }\n        if (data.size !== undefined) {\n            this.size = data.size;\n        }\n        if (data.speed !== undefined) {\n            this.speed = (0, Utils_1.setRangeValue)(data.speed);\n        }\n        this.spin.load(data.spin);\n        if (data.straight !== undefined) {\n            this.straight = data.straight;\n        }\n        this.trail.load(data.trail);\n        if (data.vibrate !== undefined) {\n            this.vibrate = data.vibrate;\n        }\n        if (data.warp !== undefined) {\n            this.warp = data.warp;\n        }\n    }\n}\nexports.Move = Move;\n"]},"metadata":{},"sourceType":"script"}